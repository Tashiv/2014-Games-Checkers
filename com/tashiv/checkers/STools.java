package com.tashiv.checkers;

/**
 * A class that contains general tools needed to run the game,
 * which are accessible through the Class Name and so instantiation
 * is not required.
 *
 * @author Tashiv Sewpersad 
 * 13 / 09 / 2014
 */
public class STools
{
	/**
	* A method for testing to see if a provided string is a number in a string form.
	*
	* @param theString The string that will be tested to see if it is a number.
	* @return returns a boolean indicating if the String is a digit. ([true] => is a digit) 
	*/
	public static boolean isDigit(String theString)
	{
		if (theString.equals("")) // Case: Empty String
			return false;
		// Process character by character	
		int iLen = theString.length(); 
		for (int i = 0; i < iLen; i++)
		{
			if (Character.isDigit(theString.charAt(i)) == false) // Case: if a single character is not a number (eg: 'a' is not a number)
				{
					return false;
				}
		}
		return true;
	}

	/**
	* A method for converting a single AnimationID (form "x,y,playerID,currentframe") made up of an x Coordinate 
	* followed by a y coordinate followed by the player whose Animation it is followed
	* by the current frame number of the animation all separated by commas to an array
	* containing the parts individually for processing purposes.
	*
	* @param anID An animation ID generated by the TextBoardClass for the Animation Class.
	* @return returns an array of strings containing individual Animation ID characteristics (in form [x,y,PlayerID,CurrentFrame]) 
	*/
	public static String[] animateIDtoData(String anID)
	{
		// initialize variables
		String[] sResult = new String[4];
		// extract the comma separated parts
		for (int i = 0; i < 3; i++)
		{
			int iPos = anID.indexOf(",");
			sResult[i] = anID.substring(0,iPos);
			anID = anID.substring(iPos+1,anID.length());
		}
		// Add final part (theCurrentFrame)
		sResult[3] = anID;
		return sResult;
	}
}